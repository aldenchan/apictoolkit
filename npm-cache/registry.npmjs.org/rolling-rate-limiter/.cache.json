{"_id":"rolling-rate-limiter","_rev":"14-a570a88c47bfc1b390c4b220cfaf12e6","name":"rolling-rate-limiter","description":"Rate limiter that supports a rolling window, either in-memory or backed by redis","dist-tags":{"latest":"0.1.4"},"versions":{"0.0.0":{"name":"rolling-rate-limiter","version":"0.0.0","description":"Rate limiter that supports a rolling window, either in-memory or backed by redis","main":"index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"https://github.com/classdojo/rolling-rate-limiter"},"keywords":["rate","limiter","ratelimiter","redis","rolling","window"],"author":{"name":"Peter Hayes"},"license":"ISC","bugs":{"url":"https://github.com/classdojo/rolling-rate-limiter/issues"},"homepage":"https://github.com/classdojo/rolling-rate-limiter","dependencies":{"microtime-nodejs":"~1.0.0","fakeredis":"~0.3.0"},"devDependencies":{"sinon":"~1.12.2","chai":"~1.10.0","async":"~0.9.0","mocha":"~2.1.0","redis":"~0.12.1"},"_id":"rolling-rate-limiter@0.0.0","dist":{"shasum":"e47fd587df03cce87e70d2f09522d7f8305adf17","tarball":"https://registry.npmjs.org/rolling-rate-limiter/-/rolling-rate-limiter-0.0.0.tgz"},"_from":".","_npmVersion":"1.3.24","_npmUser":{"name":"peterkhayes","email":"peter.k.hayes@gmail.com"},"maintainers":[{"name":"peterkhayes","email":"peter.k.hayes@gmail.com"}],"directories":{}},"0.0.1":{"name":"rolling-rate-limiter","version":"0.0.1","description":"Rate limiter that supports a rolling window, either in-memory or backed by redis","main":"index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"https://github.com/classdojo/rolling-rate-limiter"},"keywords":["rate","limiter","ratelimiter","redis","rolling","window"],"author":{"name":"Peter Hayes"},"license":"ISC","bugs":{"url":"https://github.com/classdojo/rolling-rate-limiter/issues"},"homepage":"https://github.com/classdojo/rolling-rate-limiter","dependencies":{"microtime-nodejs":"~1.0.0","fakeredis":"~0.3.0"},"devDependencies":{"sinon":"~1.12.2","chai":"~1.10.0","async":"~0.9.0","mocha":"~2.1.0","redis":"~0.12.1"},"_id":"rolling-rate-limiter@0.0.1","dist":{"shasum":"d2d3a22eae0d45ef8ecaebfa7b9709c438da1f61","tarball":"https://registry.npmjs.org/rolling-rate-limiter/-/rolling-rate-limiter-0.0.1.tgz"},"_from":".","_npmVersion":"1.3.24","_npmUser":{"name":"peterkhayes","email":"peter.k.hayes@gmail.com"},"maintainers":[{"name":"peterkhayes","email":"peter.k.hayes@gmail.com"}],"directories":{}},"0.0.3":{"name":"rolling-rate-limiter","version":"0.0.3","description":"Rate limiter that supports a rolling window, either in-memory or backed by redis","main":"index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"https://github.com/classdojo/rolling-rate-limiter"},"keywords":["rate","limiter","ratelimiter","redis","rolling","window"],"author":{"name":"Peter Hayes"},"license":"ISC","bugs":{"url":"https://github.com/classdojo/rolling-rate-limiter/issues"},"homepage":"https://github.com/classdojo/rolling-rate-limiter","dependencies":{"microtime-nodejs":"~1.0.0"},"devDependencies":{"fakeredis":"~0.3.0","sinon":"~1.12.2","chai":"~1.10.0","async":"~0.9.0","mocha":"~2.1.0","redis":"~0.12.1"},"_id":"rolling-rate-limiter@0.0.3","dist":{"shasum":"c6e1f5eb6acdb7775434b586a585d1db499ad8a6","tarball":"https://registry.npmjs.org/rolling-rate-limiter/-/rolling-rate-limiter-0.0.3.tgz"},"_from":".","_npmVersion":"1.3.24","_npmUser":{"name":"peterkhayes","email":"peter.k.hayes@gmail.com"},"maintainers":[{"name":"peterkhayes","email":"peter.k.hayes@gmail.com"}],"directories":{}},"0.1.0":{"name":"rolling-rate-limiter","version":"0.1.0","description":"Rate limiter that supports a rolling window, either in-memory or backed by redis","main":"index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"https://github.com/classdojo/rolling-rate-limiter"},"keywords":["rate","limiter","ratelimiter","redis","rolling","window"],"author":{"name":"Peter Hayes"},"license":"ISC","bugs":{"url":"https://github.com/classdojo/rolling-rate-limiter/issues"},"homepage":"https://github.com/classdojo/rolling-rate-limiter","dependencies":{"microtime-nodejs":"~1.0.0"},"devDependencies":{"fakeredis":"~0.3.0","sinon":"~1.12.2","chai":"~1.10.0","async":"~0.9.0","mocha":"~2.1.0","redis":"~0.12.1"},"_id":"rolling-rate-limiter@0.1.0","dist":{"shasum":"6139a2295fc98aad46a307902e72097f00647b82","tarball":"https://registry.npmjs.org/rolling-rate-limiter/-/rolling-rate-limiter-0.1.0.tgz"},"_from":".","_npmVersion":"1.3.24","_npmUser":{"name":"peterkhayes","email":"peter.k.hayes@gmail.com"},"maintainers":[{"name":"peterkhayes","email":"peter.k.hayes@gmail.com"}],"directories":{}},"0.1.1":{"name":"rolling-rate-limiter","version":"0.1.1","description":"Rate limiter that supports a rolling window, either in-memory or backed by redis","main":"index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"https://github.com/classdojo/rolling-rate-limiter"},"keywords":["rate","limiter","ratelimiter","redis","rolling","window"],"author":{"name":"Peter Hayes"},"license":"ISC","bugs":{"url":"https://github.com/classdojo/rolling-rate-limiter/issues"},"homepage":"https://github.com/classdojo/rolling-rate-limiter","dependencies":{"microtime-nodejs":"~1.0.0"},"devDependencies":{"fakeredis":"~0.3.0","sinon":"~1.12.2","chai":"~1.10.0","async":"~0.9.0","mocha":"~2.1.0","redis":"~0.12.1"},"_id":"rolling-rate-limiter@0.1.1","dist":{"shasum":"491521cfc6416534552e45500118609119196b65","tarball":"https://registry.npmjs.org/rolling-rate-limiter/-/rolling-rate-limiter-0.1.1.tgz"},"_from":".","_npmVersion":"1.3.24","_npmUser":{"name":"peterkhayes","email":"peter.k.hayes@gmail.com"},"maintainers":[{"name":"peterkhayes","email":"peter.k.hayes@gmail.com"}],"directories":{}},"0.1.2":{"name":"rolling-rate-limiter","version":"0.1.2","description":"Rate limiter that supports a rolling window, either in-memory or backed by redis","main":"index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"https://github.com/classdojo/rolling-rate-limiter"},"keywords":["rate","limiter","ratelimiter","redis","rolling","window"],"author":{"name":"Peter Hayes"},"license":"ISC","bugs":{"url":"https://github.com/classdojo/rolling-rate-limiter/issues"},"homepage":"https://github.com/classdojo/rolling-rate-limiter","dependencies":{"microtime-nodejs":"~1.0.0"},"devDependencies":{"fakeredis":"~0.3.0","sinon":"~1.12.2","chai":"~1.10.0","async":"~0.9.0","mocha":"~2.1.0","redis":"~0.12.1"},"_id":"rolling-rate-limiter@0.1.2","dist":{"shasum":"13a893c461d358879dce55fb6eadc1938c68591d","tarball":"https://registry.npmjs.org/rolling-rate-limiter/-/rolling-rate-limiter-0.1.2.tgz"},"_from":".","_npmVersion":"1.3.24","_npmUser":{"name":"peterkhayes","email":"peter.k.hayes@gmail.com"},"maintainers":[{"name":"peterkhayes","email":"peter.k.hayes@gmail.com"}],"directories":{}},"0.1.3":{"name":"rolling-rate-limiter","version":"0.1.3","description":"Rate limiter that supports a rolling window, either in-memory or backed by redis","main":"index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"git+https://github.com/classdojo/rolling-rate-limiter.git"},"keywords":["rate","limiter","ratelimiter","redis","rolling","window"],"author":{"name":"Peter Hayes"},"license":"ISC","bugs":{"url":"https://github.com/classdojo/rolling-rate-limiter/issues"},"homepage":"https://github.com/classdojo/rolling-rate-limiter","dependencies":{"microtime-nodejs":"~1.0.0"},"devDependencies":{"fakeredis":"~0.3.0","sinon":"~1.12.2","chai":"~1.10.0","async":"~0.9.0","mocha":"~2.1.0","redis":"~0.12.1"},"gitHead":"81cc8cc5725f39922ce087d83c90e32bfa6fda14","_id":"rolling-rate-limiter@0.1.3","_shasum":"5a0fd12ea78c753f440f713e950a5ea1cc157fa8","_from":".","_npmVersion":"3.3.6","_nodeVersion":"5.0.0","_npmUser":{"name":"peterkhayes","email":"peter.k.hayes@gmail.com"},"dist":{"shasum":"5a0fd12ea78c753f440f713e950a5ea1cc157fa8","tarball":"https://registry.npmjs.org/rolling-rate-limiter/-/rolling-rate-limiter-0.1.3.tgz"},"maintainers":[{"name":"peterkhayes","email":"peter.k.hayes@gmail.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/rolling-rate-limiter-0.1.3.tgz_1460364248397_0.43332413537427783"},"directories":{}},"0.1.4":{"name":"rolling-rate-limiter","version":"0.1.4","description":"Rate limiter that supports a rolling window, either in-memory or backed by redis","main":"index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"git+https://github.com/classdojo/rolling-rate-limiter.git"},"keywords":["rate","limiter","ratelimiter","redis","rolling","window"],"author":{"name":"Peter Hayes"},"license":"ISC","bugs":{"url":"https://github.com/classdojo/rolling-rate-limiter/issues"},"homepage":"https://github.com/classdojo/rolling-rate-limiter","dependencies":{"microtime-nodejs":"~1.0.0"},"devDependencies":{"fakeredis":"~0.3.0","chai":"~1.10.0","async":"~0.9.0","mocha":"~2.1.0"},"gitHead":"ceff9a89b6f75ef3f7ea499072c141d05ac3fcf3","_id":"rolling-rate-limiter@0.1.4","_shasum":"d4525f0a9d68d00e72b844d148967971968a1d9f","_from":".","_npmVersion":"3.3.9","_nodeVersion":"4.2.1","_npmUser":{"name":"peterkhayes","email":"peter.k.hayes@gmail.com"},"dist":{"shasum":"d4525f0a9d68d00e72b844d148967971968a1d9f","tarball":"https://registry.npmjs.org/rolling-rate-limiter/-/rolling-rate-limiter-0.1.4.tgz"},"maintainers":[{"name":"peterkhayes","email":"peter.k.hayes@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/rolling-rate-limiter-0.1.4.tgz_1463097918993_0.7084082658402622"},"directories":{}}},"readme":"# Rolling Rate Limiter\n[![Build Status](https://travis-ci.org/classdojo/rolling-rate-limiter.svg?branch=master)](https://travis-ci.org/classdojo/rolling-rate-limiter)\n\n## Description\nThis is an implementation of a rate limiter in node.js that allows for rate limiting with a rolling window.  \n\nThis means that if a user is allowed 5 actions per 60 seconds, any action will be blocked if 5 actions have already occured in the preceeding 60 seconds, without any set points at which this interval resets.  This contrasts with many existing implementations, in which a user could make 5 requests at 0:59 and another 5 requests at 1:01.  \n\nIt can use either in-memory storage or Redis as a backend.  If Redis is used, multiple rate limiters can share one instance with different namespaces, and multiple processes can share rate limiter state safely without race conditions. The implementation uses what I believe to be a novel algorithm, with sorted sets.  \n\n## Examples\n\n### In-memory\n```javascript\n  \n  /*\n    Setup:\n  */\n\n  var RateLimiter = require(\"rolling-rate-limiter\");\n\n  var limiter = RateLimiter({\n    interval: 1000 // in miliseconds\n    maxInInterval: 10\n    minDifference: 100 // optional: the minimum time (in miliseconds) between any two actions\n  });\n\n  /*\n    Action:\n  */\n\n  function attemptAction(userId) {\n\n    // Argument should be a unique identifier for a user if one exists.\n    // If none is provided, the limiter will not differentiate between users.\n    var timeLeft = limiter(userId) \n    \n    if (timeLeft > 0) {\n\n      // limit was exceeded, action should not be allowed\n      // timeLeft is the number of ms until the next action will be allowed\n      // note that this can be treated as a boolean, since 0 is falsy\n    \n    } else {\n    \n      // limit was not exceeded, action should be allowed\n    \n    }\n\n  }\n\n  /*\n    Note that the in-memory version can also operate asynchronously.\n    The syntax is identical to the redis implementation below.\n  */\n```\n\n### With a redis backend\nThis allows multiple processes (e.g. multiple instances of a server application) to use a single redis to share rate limiter state.  Make sure that the limiters have identical configurations in each instance.\n```javascript\n  \n  /*\n    Setup:\n  */\n\n  var RateLimiter = require(\"rolling-rate-limiter\");\n  var Redis = require(\"redis\");\n  var client = Redis.createClient(config);\n\n  var limiter = RateLimiter({\n    redis: client,\n    namespace: \"UserLoginLimiter\" // optional: allows one redis instance to handle multiple types of rate limiters. defaults to \"rate-limiter-{string of 8 random characters}\"\n    interval: 1000\n    maxInInterval: 10\n    minDifference: 100\n  });\n\n  /*\n    Action:\n  */\n  \n  function attemptAction(userId, cb) {\n    limiter(userId, function(err, timeLeft, actionsLeft) {\n      if (err) {\n        // redis failed or similar.\n      } else if (timeLeft) {\n        // limit was exceeded, action should not be allowed\n      } else {\n        // limit was not exceeded, action should be allowed\n      }\n    });\n  }\n\n```\n\n### As a middleware\nYou can easily use this module to set up a request rate limiter middleware in Express.\n```javascript\n  var limiter = RateLimiter({\n    redis: redisClient,\n    namespace: \"requestRateLimiter\",\n    interval: 60000,\n    maxInInterval: 100,\n    minDifference: 100\n  });\n\n  app.use(function(req, res, next) {\n\n    // \"req.ipAddress\" could be replaced with any unique user identifier\n    // Note that the limiter returns the number of miliseconds until an action\n    // will be allowed.  Since 0 is falsey, this can be treated as a boolean.\n    limiter(req.ipAddress, function(err, timeLeft) {\n      if (err) {\n        return res.status(500).send();\n      } else if (timeLeft) {\n        return res.status(429).send(\"You must wait \" + timeLeft + \" ms before you can make requests.\");\n      } else {\n        return next();\n      }\n    });\n\n  });\n```\n\n## Method of operation\n  * Each identifier/user corresponds to a __sorted set__ data structure.  The keys and values are both equal to the (microsecond) times at which actions were attempted, allowing easy manipulation of this list.\n  * When a new action comes in for a user, all elements in the set that occurred earlier than (current time - interval) are dropped from the set. \n  * If the number of elements in the set is still greater than the maximum, the current action is blocked.\n  * If a minimum difference has been set and the most recent previous element is too close to the current time, the current action is blocked.\n  * The current action is then added to the set.\n  * __Note__: if an action is blocked, it is still added to the set.  This means that if a user is continually attempting actions more quickly than the allowed rate, __all__ of their actions will be blocked until they pause or slow their requests.\n  * If the limiter uses a redis instance, the keys are prefixed with namespace, allowing a single redis instance to support separate rate limiters.\n  * All redis operations for a single rate-limit check/update are performed as an atomic transaction, allowing rate limiters running on separate processes or machines to share state safely.\n","maintainers":[{"name":"peterkhayes","email":"peter.k.hayes@gmail.com"}],"time":{"modified":"2016-05-13T00:05:19.430Z","created":"2015-02-05T21:51:13.010Z","0.0.0":"2015-02-05T21:51:13.010Z","0.0.1":"2015-02-05T22:03:56.898Z","0.0.3":"2015-02-06T21:25:33.172Z","0.1.0":"2015-02-07T00:19:20.750Z","0.1.1":"2015-02-18T00:59:13.978Z","0.1.2":"2015-02-19T20:03:55.439Z","0.1.3":"2016-04-11T08:44:10.537Z","0.1.4":"2016-05-13T00:05:19.430Z"},"homepage":"https://github.com/classdojo/rolling-rate-limiter","keywords":["rate","limiter","ratelimiter","redis","rolling","window"],"repository":{"type":"git","url":"git+https://github.com/classdojo/rolling-rate-limiter.git"},"author":{"name":"Peter Hayes"},"bugs":{"url":"https://github.com/classdojo/rolling-rate-limiter/issues"},"license":"ISC","readmeFilename":"README.md","_attachments":{},"_etag":"\"EDHLULK16GK6SXTKY9T97LOTH\"","_cached":true}